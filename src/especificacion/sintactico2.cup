package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;

	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

:}

/* Simbolos Terminales */
/* Palabras claves */
terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal FOR;
terminal BOOLEAN;
terminal INT;
terminal VECTOR;
terminal READ;
terminal WRITE;
terminal DO;
terminal String TRUE;
terminal String FALSE;

/* Asignacion */
terminal ASSIGN;
terminal TO;

/* Matematicos */
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal MOD;

/* Relaciones */
terminal EQ;
terminal LT;
terminal LE;
terminal GT;
terminal GE;
terminal NE;

/*Logicos*/
terminal AND;
terminal OR;
terminal NOT;

/* Vector */
terminal LBRACKET;
terminal RBRACKET;

/* Numero - Identificador */
terminal String ID;
terminal String NUM;

/* Extras */
terminal LPAREN;
terminal RPAREN;
terminal SEMI;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase declaration;
non terminal NodoBase if_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase expr;
non terminal String type;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;

non terminal NodoBase condition;
non terminal NodoBase bool_expr;
non terminal NodoBase boolean_value;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
/*Nuevo*/
precedence left OR;
precedence left AND;
precedence left EQ, NE, LT, LE, GT, GE;
precedence left OVER, MOD;
precedence right NOT;


/* REGLAS GRAMATICALES */

/*Regla principal*/
program     ::= stmt_seq:s	{:
        if(debug) System.out.println("\t Regla 1");
        ast = s;
:};

stmt_seq ::= stmt_seq:ini stmt:sent{:
        if (debug) System.out.println("\t regla 2a - Secuencias de sentencias");
        NodoBase hijoActual = ini;
        if (hijoActual != null) {
            while(hijoActual.TieneHermano()){
                hijoActual = hijoActual.getHermanoDerecha();
            }
            hijoActual.setHermanoDerecha(sent);
            RESULT = ini;
        } else {
            RESULT = sent;
        }
:} | stmt:sent {:
        if (debug) System.out.println("\t regla 2b - Una sentencia");
        RESULT = sent;
:};



stmt ::= declaration:decla {:
            if(debug) System.out.println("\t Regla 3a Declaracion");
            RESULT=decla;
:}| assign_stmt:sasi	{:
            if(debug) System.out.println("\t regla 3b Asignacion");
         	RESULT=sasi;
:}| if_stmt:sif	{:
            if(debug) System.out.println("\t regla 3c If");
  			RESULT=sif;
:}| for_stmt:sfor	{:
            if(debug) System.out.println("\t regla 3d For");
            RESULT=sfor;
:}| repeat_stmt:srep	{:
            if(debug) System.out.println("\t regla 3e Repeat");
  			RESULT=srep;
:}| read_stmt:slec	{:
            if(debug) System.out.println("\t regla 3f Read");
  			RESULT=slec;
:}| write_stmt:sesc	{:
            if(debug) System.out.println("\t regla 3g Write");
  			RESULT=sesc;
:}| error {:
            if(debug) System.out.println("\t regla 3h Error");
  			System.out.println("Ocurrio error en cup # 0003 - No se reconoce sentencia CUP");
  			RESULT=null;
:};

declaration ::= type:typ ID:var SEMI{:
    if (debug) System.out.println("Regla 4a - Declaracion variable simple");
    RESULT = new NodoDeclaracion((String)typ,var.toString(),0);
:} | type:typ ID:var LBRACKET expr:size RBRACKET SEMI{:
       if (debug) System.out.println("Regla 4b - Declaracion variable vector");
       RESULT = new NodoDeclaracionVector((String)typ,var.toString(),size);
   :};

type ::= BOOLEAN {:
    RESULT = "boolean";
:} | INT {:
    RESULT = "int";
:};

assign_stmt ::= ID:variable ASSIGN expr:ex SEMI{:
      if(debug) System.out.println("\t regla 5 parte final");
      if(variable!=null)
         RESULT = new NodoAsignacion(variable.toString(),ex);
      else{
          RESULT = null;
          System.out.println("Ocurrio error en cup # 0001 Asignacion");
      }
:} | ID:variable LBRACKET expr:index RBRACKET ASSIGN expr:val SEMI{:
        if(debug) System.out.println("\t regla 5 vector");
	    if(variable != null)
	        RESULT = new NodoAsignacionVector(variable.toString(),index,val);
        else {
            System.out.println("Error en cup # 0002 - Asignacion Vectorial");
        }
:} | ID:variable ASSIGN boolean_value:ex SEMI {:
    if(variable!=null)
       RESULT = new NodoAsignacion(variable.toString(),ex);
    else{
       RESULT = null;
       System.out.println("Ocurrio error en assign boolean");
    }
:};

/* Condicional if-else */
if_stmt     ::= IF bool_expr:ex THEN stmt_seq:pthen END SEMI{:
            if(debug) System.out.println("\t regla 4a");
		    RESULT = new NodoIf(ex,pthen);
		:}
		| IF bool_expr:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END SEMI{:
		    if(debug) System.out.println("\t regla 4b");
		    RESULT = new NodoIf(ex,pthen,pelse);
		:};

/* Ciclo repeat-until */
repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL bool_expr:prueba SEMI{:
            if(debug) System.out.println("\t regla 5");
            RESULT = new NodoRepeat(cuerpo,prueba);
		:}
		;

/* Ciclo for */
for_stmt ::= FOR ID:var ASSIGN expr:ini TO expr:end DO stmt_seq:sent END SEMI{:
            if(debug) System.out.println("\t regla 6");
            RESULT = new NodoFor(var,ini,end,sent);
        :}
        ;

/* Lectura */
read_stmt   ::= READ ID:variable	{:
        if(debug) System.out.println("\t regla 8");
		System.out.println("Leyendo Variable");
		if(variable!=null)
			RESULT = new NodoLeer(variable.toString());
		else{
			RESULT = null;
			System.out.println("Ocurrio error en cup # 0002");
		}
	:}
	;

/* Escritura */
write_stmt  ::= WRITE expr:ex SEMI{:
    if(debug) System.out.println("\t regla 9");
	RESULT= new NodoEscribir(ex);
:} | WRITE condition: ex SEMI{:
    RESULT = new NodoEscribir(ex);
:};

expr  ::= expr:exI PLUS term:exD	{:
        if(debug) System.out.println("\t regla 11a");
        RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
    :}
	| expr:exI MINUS term:exD	{:
	    if(debug) System.out.println("\t regla 11b");
        RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
    :}
	| term:ex	{:
	    if(debug) System.out.println("\t regla 11c");
        RESULT=ex;
    :}
	;

term        ::= term:exI TIMES factor:exD	{:
            if(debug) System.out.println("\t regla 11a");
            RESULT = new NodoOperacion(exI,tipoOp.por,exD);
        :}
		| term:exI OVER factor:exD	{:
		    if(debug) System.out.println("\t regla 11b");
            RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
		:}
		| term:exI MOD factor:exD {:
		    if(debug) System.out.println("\t regla 11c");
		    RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
		:}
		| factor:fac {:
		    if(debug) System.out.println("\t regla 11d");
            RESULT=fac;
        :}
		;

factor      ::= LPAREN expr:ex RPAREN	{: if(debug) System.out.println("\t regla 12a");
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c");
					if(variable!=null){
						RESULT= new NodoIdentificador(variable.toString());
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		|  ID:variable LBRACKET expr:index RBRACKET {:
                      if (debug) System.out.println("Regla 12e - Acceso a elemento de vector");
                      RESULT = new NodoAccesoVector(variable.toString(), index);
        :} | error	{: if(debug) System.out.println("\t regla 12d");
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;

condition ::= expr:exI LT expr:exD {:
    if(debug) System.out.println("\t regla 10a");
    RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
:} | expr:exI LE expr:exD {:
    if(debug) System.out.println("\t regla 10c");
    RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
:} | expr:exI GT expr:exD {:
    if(debug) System.out.println("\t regla 10d");
    RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
:} | expr:exI GE expr:exD {:
    if(debug) System.out.println("\t regla 10e");
    RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);
:} | expr:exI EQ expr:exD {:
    if(debug) System.out.println("\t regla 10b");
    RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
:} | expr:exI NE expr:exD {:
    if(debug) System.out.println("\t regla 10f");
    RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
:};

bool_expr ::= bool_expr:exI OR bool_expr:exD {:
            RESULT = new NodoOperacion(exI,tipoOp.or,exD);
:} | bool_expr:exI AND bool_expr:exD {:
            RESULT = new NodoOperacion(exI,tipoOp.and,exD);
:} | NOT bool_expr:ex {:
            RESULT = new NodoOperacion(null,tipoOp.not,ex);
:} | condition:cond {:
            RESULT = cond;
:};

boolean_value ::= TRUE:verdadero {:
    RESULT= new NodoBool(Boolean.parseBoolean(verdadero));
:} | FALSE:falso {:
    RESULT= new NodoBool(Boolean.parseBoolean(falso));
:};